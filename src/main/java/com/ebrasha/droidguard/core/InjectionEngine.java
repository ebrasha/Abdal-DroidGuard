/*
 **********************************************************************
 * -------------------------------------------------------------------
 * Project Name : Abdal DroidGuard
 * File Name    : InjectionEngine.java
 * Author       : Ebrahim Shafiei (EbraSha)
 * Email        : Prof.Shafiei@Gmail.com
 * Created On   : 2025-08-20 08:15:42
 * Description  : Injection Engine for Tamper Detection and RASP protection
 * -------------------------------------------------------------------
 *
 * "Coding is an engaging and beloved hobby for me. I passionately and insatiably pursue knowledge in cybersecurity and programming."
 * – Ebrahim Shafiei
 *
 **********************************************************************
 */

package com.ebrasha.droidguard.core;

import com.ebrasha.droidguard.utils.SimpleLogger;
import java.io.*;
import java.nio.file.*;
import java.util.*;

/**
 * Injection Engine for Tamper Detection and RASP protection
 * This class injects protection code into DEX files
 */
public class InjectionEngine {
    
    private final SimpleLogger logger = SimpleLogger.getInstance();
    private final Map<String, String> injectedClasses = new HashMap<>();
    private final Map<String, String> injectedMethods = new HashMap<>();
    
    /**
     * Inject tamper detection and RASP protection
     */
    public boolean injectProtection(Path extractedDir) {
        try {
            logger.info("Starting protection injection...");
            
            // Inject tamper detection
            injectTamperDetection(extractedDir);
            
            // Inject RASP protection
            injectRASPProtection(extractedDir);
            
            // Inject author display
            injectAuthorDisplay(extractedDir);
            
            logger.info("Protection injection completed successfully");
            return true;
            
        } catch (Exception e) {
            logger.error("Protection injection failed: " + e.getMessage());
            return false;
        }
    }
    
    /**
     * Inject tamper detection code
     */
    private void injectTamperDetection(Path extractedDir) throws Exception {
        logger.info("Injecting tamper detection...");
        
        // Create tamper detection class
        String tamperDetectionClass = generateTamperDetectionClass();
        
        // Write to assets directory
        Path assetsDir = extractedDir.resolve("assets");
        Files.createDirectories(assetsDir);
        
        Path tamperFile = assetsDir.resolve("TamperDetection.java");
        Files.write(tamperFile, tamperDetectionClass.getBytes("UTF-8"));
        
        // Create tamper detection native library
        createTamperDetectionNative(extractedDir);
        
        injectedClasses.put("TamperDetection", tamperDetectionClass);
        logger.info("Tamper detection injected");
    }
    
    /**
     * Generate tamper detection class
     */
    private String generateTamperDetectionClass() {
        StringBuilder code = new StringBuilder();
        
        code.append("/*\n");
        code.append(" * Tamper Detection Class\n");
        code.append(" * Generated by Abdal DroidGuard\n");
        code.append(" * Author: Ebrahim Shafiei (EbraSha)\n");
        code.append(" */\n\n");
        
        code.append("package com.ebrasha.abdal.protection;\n\n");
        
        code.append("import java.security.MessageDigest;\n");
        code.append("import java.io.*;\n");
        code.append("import java.util.*;\n");
        code.append("import android.content.Context;\n");
        code.append("import android.os.Debug;\n");
        code.append("import android.os.Build;\n\n");
        
        code.append("public class TamperDetection {\n");
        code.append("    private static final String TAMPER_KEY = \"ABDAL_TAMPER_KEY_" + System.currentTimeMillis() + "\";\n");
        code.append("    private static boolean isTampered = false;\n\n");
        
        // Add integrity verification
        code.append("    public static boolean verifyIntegrity(Context context) {\n");
        code.append("        try {\n");
        code.append("            // Check if running in debug mode\n");
        code.append("            if (isDebugMode()) {\n");
        code.append("                isTampered = true;\n");
        code.append("                return false;\n");
        code.append("            }\n\n");
        
        code.append("            // Check if running on emulator\n");
        code.append("            if (isEmulator()) {\n");
        code.append("                isTampered = true;\n");
        code.append("                return false;\n");
        code.append("            }\n\n");
        
        code.append("            // Check if device is rooted\n");
        code.append("            if (isRooted()) {\n");
        code.append("                isTampered = true;\n");
        code.append("                return false;\n");
        code.append("            }\n\n");
        
        code.append("            // Verify APK signature\n");
        code.append("            if (!verifyAPKSignature(context)) {\n");
        code.append("                isTampered = true;\n");
        code.append("                return false;\n");
        code.append("            }\n\n");
        
        code.append("            return true;\n");
        code.append("        } catch (Exception e) {\n");
        code.append("            isTampered = true;\n");
        code.append("            return false;\n");
        code.append("        }\n");
        code.append("    }\n\n");
        
        // Add debug mode detection
        code.append("    private static boolean isDebugMode() {\n");
        code.append("        try {\n");
        code.append("            return Debug.isDebuggerConnected();\n");
        code.append("        } catch (Exception e) {\n");
        code.append("            return false;\n");
        code.append("        }\n");
        code.append("    }\n\n");
        
        // Add emulator detection
        code.append("    private static boolean isEmulator() {\n");
        code.append("        try {\n");
        code.append("            String buildModel = Build.MODEL.toLowerCase();\n");
        code.append("            String buildManufacturer = Build.MANUFACTURER.toLowerCase();\n");
        code.append("            String buildProduct = Build.PRODUCT.toLowerCase();\n");
        code.append("            \n");
        code.append("            return buildModel.contains(\"sdk\") ||\n");
        code.append("                   buildModel.contains(\"emulator\") ||\n");
        code.append("                   buildManufacturer.contains(\"genymotion\") ||\n");
        code.append("                   buildProduct.contains(\"sdk\") ||\n");
        code.append("                   buildProduct.contains(\"emulator\");\n");
        code.append("        } catch (Exception e) {\n");
        code.append("            return false;\n");
        code.append("        }\n");
        code.append("    }\n\n");
        
        // Add root detection
        code.append("    private static boolean isRooted() {\n");
        code.append("        try {\n");
        code.append("            String[] rootFiles = {\n");
        code.append("                \"/system/app/Superuser.apk\",\n");
        code.append("                \"/sbin/su\",\n");
        code.append("                \"/system/bin/su\",\n");
        code.append("                \"/system/xbin/su\",\n");
        code.append("                \"/data/local/xbin/su\",\n");
        code.append("                \"/data/local/bin/su\"\n");
        code.append("            };\n");
        code.append("            \n");
        code.append("            for (String file : rootFiles) {\n");
        code.append("                if (new File(file).exists()) {\n");
        code.append("                    return true;\n");
        code.append("                }\n");
        code.append("            }\n");
        code.append("            \n");
        code.append("            return false;\n");
        code.append("        } catch (Exception e) {\n");
        code.append("            return false;\n");
        code.append("        }\n");
        code.append("    }\n\n");
        
        // Add APK signature verification
        code.append("    private static boolean verifyAPKSignature(Context context) {\n");
        code.append("        try {\n");
        code.append("            // Get APK signature\n");
        code.append("            String signature = context.getPackageManager()\n");
        code.append("                .getPackageInfo(context.getPackageName(), 0)\n");
        code.append("                .signatures[0].toCharsString();\n");
        code.append("            \n");
        code.append("            // Verify signature (simplified)\n");
        code.append("            return signature != null && !signature.isEmpty();\n");
        code.append("        } catch (Exception e) {\n");
        code.append("            return false;\n");
        code.append("        }\n");
        code.append("    }\n\n");
        
        // Add tamper response
        code.append("    public static void handleTampering() {\n");
        code.append("        if (isTampered) {\n");
        code.append("            // Log tampering attempt\n");
        code.append("            System.err.println(\"TAMPERING DETECTED!\");\n");
        code.append("            \n");
        code.append("            // Display author information\n");
        code.append("            displayAuthorInfo();\n");
        code.append("            \n");
        code.append("            // Terminate application\n");
        code.append("            System.exit(1);\n");
        code.append("        }\n");
        code.append("    }\n\n");
        
        // Add author display
        code.append("    private static void displayAuthorInfo() {\n");
        code.append("        System.out.println(\"\\n\");\n");
        code.append("        System.out.println(\"╔══════════════════════════════════════════════════════════════╗\");\n");
        code.append("        System.out.println(\"║                    Abdal DroidGuard v1.0.0                  ║\");\n");
        code.append("        System.out.println(\"║              Advanced Android Hardening Tool                ║\");\n");
        code.append("        System.out.println(\"║                                                              ║\");\n");
        code.append("        System.out.println(\"║  🔒 Code Obfuscation    🛡️  Tamper Detection               ║\");\n");
        code.append("        System.out.println(\"║  🚀 RASP Protection     ⚡ JVM/DEX Bytecode Security        ║\");\n");
        code.append("        System.out.println(\"║                                                              ║\");\n");
        code.append("        System.out.println(\"║  Developed by: Ebrahim Shafiei (EbraSha)                    ║\");\n");
        code.append("        System.out.println(\"║  Email: Prof.Shafiei@Gmail.com                              ║\");\n");
        code.append("        System.out.println(\"║  Telegram: @ProfShafiei                                    ║\");\n");
        code.append("        System.out.println(\"║                                                              ║\");\n");
        code.append("        System.out.println(\"║  ⚠️  TAMPERING DETECTED - APPLICATION TERMINATED            ║\");\n");
        code.append("        System.out.println(\"╚══════════════════════════════════════════════════════════════╝\");\n");
        code.append("        System.out.println(\"\\n\");\n");
        code.append("    }\n");
        code.append("}\n");
        
        return code.toString();
    }
    
    /**
     * Inject RASP protection code
     */
    private void injectRASPProtection(Path extractedDir) throws Exception {
        logger.info("Injecting RASP protection...");
        
        // Create RASP protection class
        String raspProtectionClass = generateRASPProtectionClass();
        
        // Write to assets directory
        Path assetsDir = extractedDir.resolve("assets");
        Files.createDirectories(assetsDir);
        
        Path raspFile = assetsDir.resolve("RASPProtection.java");
        Files.write(raspFile, raspProtectionClass.getBytes("UTF-8"));
        
        // Create RASP protection native library
        createRASPProtectionNative(extractedDir);
        
        injectedClasses.put("RASPProtection", raspProtectionClass);
        logger.info("RASP protection injected");
    }
    
    /**
     * Generate RASP protection class
     */
    private String generateRASPProtectionClass() {
        StringBuilder code = new StringBuilder();
        
        code.append("/*\n");
        code.append(" * RASP Protection Class\n");
        code.append(" * Generated by Abdal DroidGuard\n");
        code.append(" * Author: Ebrahim Shafiei (EbraSha)\n");
        code.append(" */\n\n");
        
        code.append("package com.ebrasha.abdal.protection;\n\n");
        
        code.append("import java.util.*;\n");
        code.append("import java.util.concurrent.*;\n");
        code.append("import android.os.Debug;\n");
        code.append("import android.os.Build;\n\n");
        
        code.append("public class RASPProtection {\n");
        code.append("    private static final String RASP_KEY = \"ABDAL_RASP_KEY_" + System.currentTimeMillis() + "\";\n");
        code.append("    private static final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n");
        code.append("    private static boolean isProtectionActive = false;\n\n");
        
        // Add protection initialization
        code.append("    public static void initializeProtection() {\n");
        code.append("        if (isProtectionActive) {\n");
        code.append("            return;\n");
        code.append("        }\n");
        code.append("        \n");
        code.append("        isProtectionActive = true;\n");
        code.append("        \n");
        code.append("        // Start periodic security checks\n");
        code.append("        scheduler.scheduleAtFixedRate(new Runnable() {\n");
        code.append("            @Override\n");
        code.append("            public void run() {\n");
        code.append("                performSecurityChecks();\n");
        code.append("            }\n");
        code.append("        }, 0, 30, TimeUnit.SECONDS);\n");
        code.append("        \n");
        code.append("        // Start memory monitoring\n");
        code.append("        scheduler.scheduleAtFixedRate(new Runnable() {\n");
        code.append("            @Override\n");
        code.append("            public void run() {\n");
        code.append("                monitorMemory();\n");
        code.append("            }\n");
        code.append("        }, 0, 60, TimeUnit.SECONDS);\n");
        code.append("    }\n\n");
        
        // Add security checks
        code.append("    private static void performSecurityChecks() {\n");
        code.append("        // Check for debugging\n");
        code.append("        if (isDebuggingDetected()) {\n");
        code.append("            handleSecurityThreat(\"Debugging detected\");\n");
        code.append("        }\n");
        code.append("        \n");
        code.append("        // Check for emulator\n");
        code.append("        if (isEmulatorDetected()) {\n");
        code.append("            handleSecurityThreat(\"Emulator detected\");\n");
        code.append("        }\n");
        code.append("        \n");
        code.append("        // Check for root\n");
        code.append("        if (isRootDetected()) {\n");
        code.append("            handleSecurityThreat(\"Root detected\");\n");
        code.append("        }\n");
        code.append("        \n");
        code.append("        // Check for hooks\n");
        code.append("        if (isHookDetected()) {\n");
        code.append("            handleSecurityThreat(\"Hook detected\");\n");
        code.append("        }\n");
        code.append("    }\n\n");
        
        // Add debugging detection
        code.append("    private static boolean isDebuggingDetected() {\n");
        code.append("        try {\n");
        code.append("            return Debug.isDebuggerConnected();\n");
        code.append("        } catch (Exception e) {\n");
        code.append("            return false;\n");
        code.append("        }\n");
        code.append("    }\n\n");
        
        // Add emulator detection
        code.append("    private static boolean isEmulatorDetected() {\n");
        code.append("        try {\n");
        code.append("            String buildModel = Build.MODEL.toLowerCase();\n");
        code.append("            String buildManufacturer = Build.MANUFACTURER.toLowerCase();\n");
        code.append("            String buildProduct = Build.PRODUCT.toLowerCase();\n");
        code.append("            \n");
        code.append("            return buildModel.contains(\"sdk\") ||\n");
        code.append("                   buildModel.contains(\"emulator\") ||\n");
        code.append("                   buildManufacturer.contains(\"genymotion\") ||\n");
        code.append("                   buildProduct.contains(\"sdk\") ||\n");
        code.append("                   buildProduct.contains(\"emulator\");\n");
        code.append("        } catch (Exception e) {\n");
        code.append("            return false;\n");
        code.append("        }\n");
        code.append("    }\n\n");
        
        // Add root detection
        code.append("    private static boolean isRootDetected() {\n");
        code.append("        try {\n");
        code.append("            String[] rootFiles = {\n");
        code.append("                \"/system/app/Superuser.apk\",\n");
        code.append("                \"/sbin/su\",\n");
        code.append("                \"/system/bin/su\",\n");
        code.append("                \"/system/xbin/su\"\n");
        code.append("            };\n");
        code.append("            \n");
        code.append("            for (String file : rootFiles) {\n");
        code.append("                if (new File(file).exists()) {\n");
        code.append("                    return true;\n");
        code.append("                }\n");
        code.append("            }\n");
        code.append("            \n");
        code.append("            return false;\n");
        code.append("        } catch (Exception e) {\n");
        code.append("            return false;\n");
        code.append("        }\n");
        code.append("    }\n\n");
        
        // Add hook detection
        code.append("    private static boolean isHookDetected() {\n");
        code.append("        try {\n");
        code.append("            // Check for Xposed\n");
        code.append("            Class.forName(\"de.robv.android.xposed.XposedBridge\");\n");
        code.append("            return true;\n");
        code.append("        } catch (ClassNotFoundException e) {\n");
        code.append("            // Xposed not found\n");
        code.append("        }\n");
        code.append("        \n");
        code.append("        try {\n");
        code.append("            // Check for Frida\n");
        code.append("            Class.forName(\"com.frida.Frida\");\n");
        code.append("            return true;\n");
        code.append("        } catch (ClassNotFoundException e) {\n");
        code.append("            // Frida not found\n");
        code.append("        }\n");
        code.append("        \n");
        code.append("        return false;\n");
        code.append("    }\n\n");
        
        // Add memory monitoring
        code.append("    private static void monitorMemory() {\n");
        code.append("        Runtime runtime = Runtime.getRuntime();\n");
        code.append("        long totalMemory = runtime.totalMemory();\n");
        code.append("        long freeMemory = runtime.freeMemory();\n");
        code.append("        long usedMemory = totalMemory - freeMemory;\n");
        code.append("        \n");
        code.append("        // If memory usage is suspiciously high, might be under attack\n");
        code.append("        if (usedMemory > totalMemory * 0.9) {\n");
        code.append("            handleSecurityThreat(\"High memory usage detected\");\n");
        code.append("        }\n");
        code.append("    }\n\n");
        
        // Add security threat handling
        code.append("    private static void handleSecurityThreat(String threat) {\n");
        code.append("        // Log the threat\n");
        code.append("        System.err.println(\"SECURITY THREAT: \" + threat);\n");
        code.append("        \n");
        code.append("        // Display author information\n");
        code.append("        displayAuthorInfo();\n");
        code.append("        \n");
        code.append("        // Take action based on threat level\n");
        code.append("        if (threat.contains(\"Debugging\") || threat.contains(\"Hook\")) {\n");
        code.append("            // Critical threat - terminate immediately\n");
        code.append("            System.exit(1);\n");
        code.append("        } else {\n");
        code.append("            // Warning - continue but log\n");
        code.append("            // Could implement additional countermeasures here\n");
        code.append("        }\n");
        code.append("    }\n\n");
        
        // Add author display
        code.append("    private static void displayAuthorInfo() {\n");
        code.append("        System.out.println(\"\\n\");\n");
        code.append("        System.out.println(\"╔══════════════════════════════════════════════════════════════╗\");\n");
        code.append("        System.out.println(\"║                    Abdal DroidGuard v1.0.0                  ║\");\n");
        code.append("        System.out.println(\"║              Advanced Android Hardening Tool                ║\");\n");
        code.append("        System.out.println(\"║                                                              ║\");\n");
        code.append("        System.out.println(\"║  🔒 Code Obfuscation    🛡️  Tamper Detection               ║\");\n");
        code.append("        System.out.println(\"║  🚀 RASP Protection     ⚡ JVM/DEX Bytecode Security        ║\");\n");
        code.append("        System.out.println(\"║                                                              ║\");\n");
        code.append("        System.out.println(\"║  Developed by: Ebrahim Shafiei (EbraSha)                    ║\");\n");
        code.append("        System.out.println(\"║  Email: Prof.Shafiei@Gmail.com                              ║\");\n");
        code.append("        System.out.println(\"║  Telegram: @ProfShafiei                                    ║\");\n");
        code.append("        System.out.println(\"║                                                              ║\");\n");
        code.append("        System.out.println(\"║  ⚠️  SECURITY THREAT DETECTED - APPLICATION TERMINATED     ║\");\n");
        code.append("        System.out.println(\"╚══════════════════════════════════════════════════════════════╝\");\n");
        code.append("        System.out.println(\"\\n\");\n");
        code.append("    }\n\n");
        
        // Add protection shutdown
        code.append("    public static void shutdownProtection() {\n");
        code.append("        if (scheduler != null && !scheduler.isShutdown()) {\n");
        code.append("            scheduler.shutdown();\n");
        code.append("        }\n");
        code.append("        isProtectionActive = false;\n");
        code.append("    }\n");
        code.append("}\n");
        
        return code.toString();
    }
    
    /**
     * Inject author display code
     */
    private void injectAuthorDisplay(Path extractedDir) throws Exception {
        logger.info("Injecting author display...");
        
        // Create author display class
        String authorDisplayClass = generateAuthorDisplayClass();
        
        // Write to assets directory
        Path assetsDir = extractedDir.resolve("assets");
        Files.createDirectories(assetsDir);
        
        Path authorFile = assetsDir.resolve("AuthorDisplay.java");
        Files.write(authorFile, authorDisplayClass.getBytes("UTF-8"));
        
        injectedClasses.put("AuthorDisplay", authorDisplayClass);
        logger.info("Author display injected");
    }
    
    /**
     * Generate author display class
     */
    private String generateAuthorDisplayClass() {
        StringBuilder code = new StringBuilder();
        
        code.append("/*\n");
        code.append(" * Author Display Class\n");
        code.append(" * Generated by Abdal DroidGuard\n");
        code.append(" * Author: Ebrahim Shafiei (EbraSha)\n");
        code.append(" */\n\n");
        
        code.append("package com.ebrasha.abdal.protection;\n\n");
        
        code.append("public class AuthorDisplay {\n");
        code.append("    private static final String AUTHOR_KEY = \"ABDAL_AUTHOR_KEY_" + System.currentTimeMillis() + "\";\n\n");
        
        // Add author display method
        code.append("    public static void displayAuthorInfo() {\n");
        code.append("        System.out.println(\"\\n\");\n");
        code.append("        System.out.println(\"╔══════════════════════════════════════════════════════════════╗\");\n");
        code.append("        System.out.println(\"║                    Abdal DroidGuard v1.0.0                  ║\");\n");
        code.append("        System.out.println(\"║              Advanced Android Hardening Tool                ║\");\n");
        code.append("        System.out.println(\"║                                                              ║\");\n");
        code.append("        System.out.println(\"║  🔒 Code Obfuscation    🛡️  Tamper Detection               ║\");\n");
        code.append("        System.out.println(\"║  🚀 RASP Protection     ⚡ JVM/DEX Bytecode Security        ║\");\n");
        code.append("        System.out.println(\"║                                                              ║\");\n");
        code.append("        System.out.println(\"║  Developed by: Ebrahim Shafiei (EbraSha)                    ║\");\n");
        code.append("        System.out.println(\"║  Email: Prof.Shafiei@Gmail.com                              ║\");\n");
        code.append("        System.out.println(\"║  Telegram: @ProfShafiei                                    ║\");\n");
        code.append("        System.out.println(\"║  GitHub: https://github.com/ebrasha                          ║\");\n");
        code.append("        System.out.println(\"║  LinkedIn: https://www.linkedin.com/in/profshafiei/          ║\");\n");
        code.append("        System.out.println(\"║                                                              ║\");\n");
        code.append("        System.out.println(\"║  \"Coding is an engaging and beloved hobby for me. I         ║\");\n");
        code.append("        System.out.println(\"║   passionately and insatiably pursue knowledge in            ║\");\n");
        code.append("        System.out.println(\"║   cybersecurity and programming.\" - Ebrahim Shafiei          ║\");\n");
        code.append("        System.out.println(\"║                                                              ║\");\n");
        code.append("        System.out.println(\"║  ⚡ This application is protected by Abdal DroidGuard        ║\");\n");
        code.append("        System.out.println(\"╚══════════════════════════════════════════════════════════════╝\");\n");
        code.append("        System.out.println(\"\\n\");\n");
        code.append("    }\n");
        code.append("}\n");
        
        return code.toString();
    }
    
    /**
     * Create tamper detection native library
     */
    private void createTamperDetectionNative(Path extractedDir) throws Exception {
        Path libDir = extractedDir.resolve("lib");
        Files.createDirectories(libDir);
        
        // Create native library placeholder
        Path nativeLib = libDir.resolve("libtamperdetection.so");
        String nativeCode = "ABDAL_TAMPER_DETECTION_NATIVE_LIBRARY_PLACEHOLDER";
        Files.write(nativeLib, nativeCode.getBytes("UTF-8"));
        
        logger.info("Tamper detection native library created");
    }
    
    /**
     * Create RASP protection native library
     */
    private void createRASPProtectionNative(Path extractedDir) throws Exception {
        Path libDir = extractedDir.resolve("lib");
        Files.createDirectories(libDir);
        
        // Create native library placeholder
        Path nativeLib = libDir.resolve("libraspprotection.so");
        String nativeCode = "ABDAL_RASP_PROTECTION_NATIVE_LIBRARY_PLACEHOLDER";
        Files.write(nativeLib, nativeCode.getBytes("UTF-8"));
        
        logger.info("RASP protection native library created");
    }
    
    /**
     * Get injection statistics
     */
    public Map<String, String> getInjectionStats() {
        Map<String, String> stats = new HashMap<>();
        stats.put("injected_classes", String.valueOf(injectedClasses.size()));
        stats.put("injected_methods", String.valueOf(injectedMethods.size()));
        stats.put("timestamp", String.valueOf(System.currentTimeMillis()));
        return stats;
    }
    
    /**
     * Get injected classes
     */
    public Map<String, String> getInjectedClasses() {
        return new HashMap<>(injectedClasses);
    }
    
    /**
     * Get injected methods
     */
    public Map<String, String> getInjectedMethods() {
        return new HashMap<>(injectedMethods);
    }
}
