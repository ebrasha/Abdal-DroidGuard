/*
 **********************************************************************
 * -------------------------------------------------------------------
 * Project Name : Abdal DroidGuard
 * File Name    : AdvancedEmulatorDetector.java
 * Author       : Ebrahim Shafiei (EbraSha)
 * Email        : Prof.Shafiei@Gmail.com
 * Created On   : 2025-01-10 23:25:00
 * Description  : Advanced Emulator Detection that blocks Bluestacks and other emulators
 * -------------------------------------------------------------------
 *
 * "Coding is an engaging and beloved hobby for me. I passionately and insatiably pursue knowledge in cybersecurity and programming."
 * â€“ Ebrahim Shafiei
 *
 **********************************************************************
 */

package com.ebrasha.droidguard.core;

import com.ebrasha.droidguard.utils.SimpleLogger;
import java.io.*;
import java.nio.file.*;
import java.util.*;

/**
 * Advanced Emulator Detection - Blocks Bluestacks, Nox, Genymotion, etc.
 * This class provides comprehensive emulator detection that cannot be easily bypassed
 */
public class AdvancedEmulatorDetector {
    
    private final SimpleLogger logger = SimpleLogger.getInstance();
    
    /**
     * Generate advanced emulator detection code that blocks Bluestacks
     */
    public String generateAdvancedEmulatorDetectionCode() {
        StringBuilder code = new StringBuilder();
        
        code.append("/*\n");
        code.append(" * Advanced Emulator Detection Code\n");
        code.append(" * Generated by Abdal DroidGuard\n");
        code.append(" * Blocks Bluestacks, Nox, Genymotion, and other emulators\n");
        code.append(" */\n");
        code.append("package com.ebrasha.abdal.rasp;\n\n");
        
        code.append("import android.os.Build;\n");
        code.append("import java.io.File;\n");
        code.append("import java.util.*;\n\n");
        
        code.append("public class AdvancedEmulatorDetector {\n");
        code.append("    \n");
        code.append("    /**\n");
        code.append("     * Comprehensive emulator detection - blocks Bluestacks and others\n");
        code.append("     */\n");
        code.append("    public static boolean isEmulatorDetected() {\n");
        code.append("        return checkBuildProperties() || \n");
        code.append("               checkDeviceFiles() || \n");
        code.append("               checkSpecificVendors() ||\n");
        code.append("               checkHardwareCharacteristics() ||\n");
        code.append("               checkSystemProperties() ||\n");
        code.append("               checkNetworkProperties();\n");
        code.append("    }\n");
        code.append("    \n");
        code.append("    public static void blockIfEmulator() {\n");
        code.append("        if (isEmulatorDetected()) {\n");
        code.append("            // Emulator detected - terminate immediately\n");
        code.append("            android.os.Process.killProcess(android.os.Process.myPid());\n");
        code.append("            System.exit(1);\n");
        code.append("        }\n");
        code.append("    }\n");
        code.append("    \n");
        code.append("    /**\n");
        code.append("     * Check Build properties with comprehensive emulator identifiers\n");
        code.append("     */\n");
        code.append("    private static boolean checkBuildProperties() {\n");
        code.append("        String model = Build.MODEL.toLowerCase();\n");
        code.append("        String manufacturer = Build.MANUFACTURER.toLowerCase();\n");
        code.append("        String product = Build.PRODUCT.toLowerCase();\n");
        code.append("        String hardware = Build.HARDWARE.toLowerCase();\n");
        code.append("        String board = Build.BOARD.toLowerCase();\n");
        code.append("        String brand = Build.BRAND.toLowerCase();\n");
        code.append("        String device = Build.DEVICE.toLowerCase();\n");
        code.append("        \n");
        code.append("        // Comprehensive list of emulator signatures including Bluestacks\n");
        code.append("        String[] emulatorSignatures = {\n");
        code.append("            \"sdk\", \"emulator\", \"google_sdk\", \"genymotion\", \"bluestacks\",\n");
        code.append("            \"nox\", \"mumu\", \"ldplayer\", \"memu\", \"droid4x\", \"andy\",\n");
        code.append("            \"windroye\", \"koplayer\", \"amiduos\", \"youwave\", \"vmos\",\n");
        code.append("            \"x86\", \"goldfish\", \"ranchu\", \"vbox\", \"test-keys\",\n");
        code.append("            \"generic\", \"unknown\", \"android-x86\", \"qemu\"\n");
        code.append("        };\n");
        code.append("        \n");
        code.append("        for (String signature : emulatorSignatures) {\n");
        code.append("            if (model.contains(signature) ||\n");
        code.append("                manufacturer.contains(signature) ||\n");
        code.append("                product.contains(signature) ||\n");
        code.append("                hardware.contains(signature) ||\n");
        code.append("                board.contains(signature) ||\n");
        code.append("                brand.contains(signature) ||\n");
        code.append("                device.contains(signature)) {\n");
        code.append("                return true;\n");
        code.append("            }\n");
        code.append("        }\n");
        code.append("        \n");
        code.append("        // Additional specific checks for spoofed environments\n");
        code.append("        return brand.equals(\"generic\") ||\n");
        code.append("               product.equals(\"vbox86p\") ||\n");
        code.append("               product.equals(\"sdk_x86\") ||\n");
        code.append("               hardware.equals(\"vbox\") ||\n");
        code.append("               manufacturer.contains(\"unknown\") ||\n");
        code.append("               model.contains(\"google_sdk\");\n");
        code.append("    }\n");
        code.append("    \n");
        code.append("    /**\n");
        code.append("     * Check for emulator-specific files and directories\n");
        code.append("     */\n");
        code.append("    private static boolean checkDeviceFiles() {\n");
        code.append("        String[] emulatorFiles = {\n");
        code.append("            // General Emulator Traces\n");
        code.append("            \"/system/lib/libc_malloc_debug_qemu.so\",\n");
        code.append("            \"/system/bin/qemu-props\",\n");
        code.append("            \"/dev/socket/qemud\",\n");
        code.append("            \"/dev/socket/genyd\",\n");
        code.append("            \"/sys/qemu_trace\",\n");
        code.append("            \"/dev/qemu_pipe\",\n");
        code.append("            // Bluestacks specific files\n");
        code.append("            \"/data/app/com.bluestacks.appmart\",\n");
        code.append("            \"/data/app/com.bluestacks.BstCommandProcessor\",\n");
        code.append("            \"/data/app/com.bluestacks.bsn\",\n");
        code.append("            \"/data/data/com.bluestacks.appmart\",\n");
        code.append("            \"/data/data/com.bluestacks.BstCommandProcessor\",\n");
        code.append("            \"/data/data/com.bluestacks.bsn\",\n");
        code.append("            \"/storage/emulated/0/Pictures/Bluestacks\",\n");
        code.append("            \"/system/app/Bluestacks\",\n");
        code.append("            \"/system/bin/bluestacks\",\n");
        code.append("            // Nox specific files\n");
        code.append("            \"/data/app/com.bignox.app.store.hd\",\n");
        code.append("            \"/data/data/com.nox.player\",\n");
        code.append("            \"/data/data/com.bignox.app.store.hd\",\n");
        code.append("            \"/system/app/Nox\",\n");
        code.append("            // Genymotion specific files\n");
        code.append("            \"/data/data/com.genymotion.genyd\",\n");
        code.append("            \"/data/app/com.genymotion.genyd\",\n");
        code.append("            \"/system/app/Genymotion\",\n");
        code.append("            // Other emulators\n");
        code.append("            \"/data/data/com.vphone.gen\",\n");
        code.append("            \"/data/data/com.droid4x\",\n");
        code.append("            \"/data/data/com.andy\",\n");
        code.append("            \"/data/data/com.windroye\",\n");
        code.append("            \"/data/data/com.mumu\",\n");
        code.append("            \"/data/data/com.ldplayer\"\n");
        code.append("        };\n");
        code.append("        \n");
        code.append("        for (String file : emulatorFiles) {\n");
        code.append("            if (new File(file).exists()) {\n");
        code.append("                return true;\n");
        code.append("            }\n");
        code.append("        }\n");
        code.append("        return false;\n");
        code.append("    }\n");
        code.append("    \n");
        code.append("    /**\n");
        code.append("     * Check for vendor names not typically found on physical devices\n");
        code.append("     */\n");
        code.append("    private static boolean checkSpecificVendors() {\n");
        code.append("        try {\n");
        code.append("            String javaVendor = System.getProperty(\"java.vendor\", \"\").toLowerCase();\n");
        code.append("            String javaVmName = System.getProperty(\"java.vm.name\", \"\").toLowerCase();\n");
        code.append("            String javaVmVersion = System.getProperty(\"java.vm.version\", \"\").toLowerCase();\n");
        code.append("            \n");
        code.append("            if (javaVendor.contains(\"bluestacks\") || \n");
        code.append("                javaVendor.contains(\"nox\") ||\n");
        code.append("                javaVendor.contains(\"genymotion\") ||\n");
        code.append("                javaVmName.contains(\"bluestacks\") ||\n");
        code.append("                javaVmName.contains(\"nox\") ||\n");
        code.append("                javaVmVersion.contains(\"bluestacks\")) {\n");
        code.append("                return true;\n");
        code.append("            }\n");
        code.append("        } catch (Exception e) {\n");
        code.append("            return true;\n");
        code.append("        }\n");
        code.append("        return false;\n");
        code.append("    }\n");
        code.append("    \n");
        code.append("    /**\n");
        code.append("     * Check hardware characteristics typical of emulators\n");
        code.append("     */\n");
        code.append("    private static boolean checkHardwareCharacteristics() {\n");
        code.append("        try {\n");
        code.append("            // Check CPU count (emulators often have limited cores)\n");
        code.append("            int cpuCount = Runtime.getRuntime().availableProcessors();\n");
        code.append("            if (cpuCount <= 1) {\n");
        code.append("                return true;\n");
        code.append("            }\n");
        code.append("            \n");
        code.append("            // Check memory (emulators often have limited memory)\n");
        code.append("            long totalMemory = Runtime.getRuntime().totalMemory();\n");
        code.append("            if (totalMemory < 100 * 1024 * 1024) { // Less than 100MB\n");
        code.append("                return true;\n");
        code.append("            }\n");
        code.append("            \n");
        code.append("            // Check for x86 architecture (common in emulators)\n");
        code.append("            String arch = System.getProperty(\"os.arch\", \"\").toLowerCase();\n");
        code.append("            if (arch.contains(\"x86\") || arch.contains(\"amd64\")) {\n");
        code.append("                return true;\n");
        code.append("            }\n");
        code.append("            \n");
        code.append("            // Check for emulator-specific hardware\n");
        code.append("            String hardware = Build.HARDWARE.toLowerCase();\n");
        code.append("            if (hardware.contains(\"goldfish\") || \n");
        code.append("                hardware.contains(\"ranchu\") ||\n");
        code.append("                hardware.contains(\"vbox\")) {\n");
        code.append("                return true;\n");
        code.append("            }\n");
        code.append("        } catch (Exception e) {\n");
        code.append("            return true;\n");
        code.append("        }\n");
        code.append("        return false;\n");
        code.append("    }\n");
        code.append("    \n");
        code.append("    /**\n");
        code.append("     * Check system properties for emulator indicators\n");
        code.append("     */\n");
        code.append("    private static boolean checkSystemProperties() {\n");
        code.append("        try {\n");
        code.append("            String[] emulatorProps = {\n");
        code.append("                \"ro.kernel.qemu\", \"ro.hardware\", \"ro.product.model\",\n");
        code.append("                \"ro.product.manufacturer\", \"ro.build.product\", \"ro.build.fingerprint\",\n");
        code.append("                \"ro.product.device\", \"ro.product.name\", \"ro.build.display.id\"\n");
        code.append("            };\n");
        code.append("            \n");
        code.append("            String[] emulatorValues = {\n");
        code.append("                \"bluestacks\", \"nox\", \"genymotion\", \"droid4x\", \"andy\",\n");
        code.append("                \"windroye\", \"koplayer\", \"amiduos\", \"youwave\", \"vmos\",\n");
        code.append("                \"mumu\", \"ldplayer\", \"memu\", \"x86\", \"goldfish\", \"ranchu\"\n");
        code.append("            };\n");
        code.append("            \n");
        code.append("            for (String prop : emulatorProps) {\n");
        code.append("                String value = System.getProperty(prop, \"\").toLowerCase();\n");
        code.append("                for (String emulatorValue : emulatorValues) {\n");
        code.append("                    if (value.contains(emulatorValue)) {\n");
        code.append("                        return true;\n");
        code.append("                    }\n");
        code.append("                }\n");
        code.append("            }\n");
        code.append("        } catch (Exception e) {\n");
        code.append("            return true;\n");
        code.append("        }\n");
        code.append("        return false;\n");
        code.append("    }\n");
        code.append("    \n");
        code.append("    /**\n");
        code.append("     * Check network properties for emulator indicators\n");
        code.append("     */\n");
        code.append("    private static boolean checkNetworkProperties() {\n");
        code.append("        try {\n");
        code.append("            // Check for emulator-specific network characteristics\n");
        code.append("            String hostname = System.getProperty(\"user.name\", \"\").toLowerCase();\n");
        code.append("            if (hostname.contains(\"bluestacks\") || \n");
        code.append("                hostname.contains(\"nox\") ||\n");
        code.append("                hostname.contains(\"genymotion\")) {\n");
        code.append("                return true;\n");
        code.append("            }\n");
        code.append("        } catch (Exception e) {\n");
        code.append("            return true;\n");
        code.append("        }\n");
        code.append("        return false;\n");
        code.append("    }\n");
        code.append("}\n");
        
        return code.toString();
    }
    
    /**
     * Create advanced emulator detection file
     */
    public void createAdvancedEmulatorDetection(Path extractedDir) throws Exception {
        logger.info("Creating advanced emulator detection that blocks Bluestacks...");
        
        String emulatorCode = generateAdvancedEmulatorDetectionCode();
        
        // Write to assets directory
        Path assetsDir = extractedDir.resolve("assets");
        Files.createDirectories(assetsDir);
        Path emulatorFile = assetsDir.resolve("AdvancedEmulatorDetector.java");
        Files.write(emulatorFile, emulatorCode.getBytes("UTF-8"));
        
        logger.info("Advanced emulator detection created successfully");
    }
}
